import random
times = int(input("This is an AI that learns over games! How many would you like to play! The more, the better the AI! "))


total_pos = [0, 1, 2, 3, 4, 5, 6, 7, 8]
board = [' ' for _ in range(9)]
def reset_board():
    global board
    board = [' ' for _ in range(9)]
def get_empty_positions(board):
  return [i for i, x in enumerate(board) if x == ' ']

def print_board():
  row1 = f"|{board[0]}|{board[1]}|{board[2]}|"
  row2 = f"|{board[3]}|{board[4]}|{board[5]}|"
  row3 = f"|{board[6]}|{board[7]}|{board[8]}|"
  print()
  print(row1)
  print(row2)
  print(row3)
  print() 



def is_winner(board, player):
# check rows
  for i in range(0, 8, 3):
      if board[i] == board[i+1] == board[i+2] == player:
          return True
  # check columns
  for i in range(3):
      if board[i] == board[i+3] == board[i+6] == player:
          return True
  # check diagonals
  if board[0] == board[4] == board[8] == player or board[2] == board[4] == board[6] == player:
      return True
  return False

def is_board_full(board):
  return all(x != ' ' for x in board)



def player_move():
  while True:
    position = input("Enter a position to place 'X' (1-9): ")
    try:
        position = int(position) - 1
        if position in get_empty_positions(board):
            board[position] = 'X'
            break
        else:
            print("That position is already taken. Try again.")
    except ValueError:
        print("Invalid input. Try again.")


for i in range(times):
  while True:
    print_board()
    player_move()
    ai_move()
    print_board()
    if is_winner(board, 'X') and not is_winner(board, 'O'):
      print("Congratulations! You won!")
      reset_board()
      break
    if is_board_full(board) and not is_winner(board, 'O') and not is_winner(board, 'X'):
     print("It's a tie!")
     reset_board()
     break
    if is_winner(board, 'O') and not is_winner(board, 'X'):
      print("Sorry, you lost. Better luck next time!")
      reset_board()
      break

  

  
if __name__ == '__main__':
  print_board()
